#version 150

//uniform bool use_group_point_size;
//uniform float group_point_sizes[250];
//uniform bool use_color_index;
//uniform vec4 palette[64]; // todo: can be optimized

//
uniform vec3 headset_position;
uniform vec3 headset_direction;
uniform float headset_culling_range;

uniform vec3 left_controller_position;
uniform vec3 right_controller_position;
uniform float controller_effect_range;

uniform bool enable_acloud_effect;
uniform bool enable_headset_culling;

uniform float point_size = 1;

uniform int which_effect_righthand = 0;
uniform int which_effect_lefthand = 0;
uniform int which_effect_headset = 0;

uniform float collapse_tantheta = 0.577;
uniform bool colorize_with_scan_index = true;

uniform bool renderScan0 = true;
uniform bool renderScan1 = true;
uniform bool renderScan2 = true;
uniform bool renderScan3 = true;
uniform bool renderScan4 = true;
uniform bool renderScan5 = true;

in vec3 position;
in vec3 color;
in vec3 normal;
in int index;
//in float point_size;
//in uint color_index;
//in int group_index;
in int scanindex;
// u can not give default value here 

out vec3 normal_gs;
out vec4 color_gs;
out float ignore;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************


void main()
{
	// initialize with not ignore 
	ignore = 0;
	bool position_changed = false;
	bool color_changed = false;

	// visual deletion
	if(ignore < 0.5){
		if(index == 2)
			ignore = 1;
	}

	/*rendering settings related to scan index */
	if(!renderScan0 && (scanindex == 0))
		ignore = 1;
	if(!renderScan1 && (scanindex == 1))
		ignore = 1;
	if(!renderScan2 && (scanindex == 2))
		ignore = 1;
	if(!renderScan3 && (scanindex == 3))
		ignore = 1;
	if(!renderScan4 && (scanindex == 4))
		ignore = 1;
	if(!renderScan5 && (scanindex == 5))
		ignore = 1;

	if(ignore < 0.5){
		if(colorize_with_scan_index){
			if(!color_changed){
				if(scanindex == 0){
					color_gs = vec4(1,0,0,1);
					color_changed = true;
				}
				if(scanindex == 1){
					color_gs = vec4(0,1,0,1);
					color_changed = true;
				}
				if(scanindex == 2){
					color_gs = vec4(0,0,1,1);
					color_changed = true;
				}
				if(scanindex == 3){
					color_gs = vec4(1,1,0,1);
					color_changed = true;
				}
				if(scanindex == 4){
					color_gs = vec4(1,0,1,1);
					color_changed = true;
				}
				if(scanindex == 5){
					color_gs = vec4(0,1,1,1);
					color_changed = true;
				}	
			}
		}
	}

	// culling with headset 
	// if not ignored, continue
	if(ignore < 0.5){ // if not ignored
		if(enable_headset_culling){
			if(
				(distance(position.xyz,headset_position)>headset_culling_range) 
				|| (dot(normalize(position.xyz-headset_position),normalize(headset_direction))<0.5)
			){
				ignore = 1;
			}
			else 
				ignore = 0;				
		}else{
			ignore = 0;
		}
	}

	// compare with controller position 
	// if not ignored, continue
	if(ignore < 0.5){ 
		/*fake deleting*/ 
		if(which_effect_righthand == 0){
			if(distance(position.xyz,right_controller_position)<controller_effect_range){
				ignore = 1;
				color_gs = vec4(color,1);
			}
			else {
				// do nothing 
				//ignore = 0;	
			}	

		/*fake selection*/ 
		}else if(which_effect_righthand == 1){
			if(distance(position.xyz,right_controller_position)<controller_effect_range){
				if(!color_changed){
					color_gs = vec4(1,1,0,1); // yellow when selecting 
					color_changed = true;
				}
			}
			else {
				// do nothing 
				//ignore = 0;	
			}	

		/*linear melting*/ 
		}else if(which_effect_righthand == 2){
			if(distance(position.xyz,right_controller_position)<controller_effect_range){
				vec3 p0 = vec3(position.x,0,position.z);
				vec3 p1 = vec3(right_controller_position.x,0,right_controller_position.z);
				float distance_xz = distance(p0,p1);
				if(distance_xz<controller_effect_range){
					gl_Position = vec4(position,1);
					gl_Position.y -= (controller_effect_range - distance_xz) * collapse_tantheta;
					position_changed = true;
				}
			}
		}else{
			// 
		}
	}
	
	// if not ignored, continue
	if(ignore < 0.5){ 
		// 
		normal_gs = normal;
		if(!color_changed) // if changed, do not overwrite 
			color_gs = vec4(color,1);
		if(!position_changed)
			gl_Position = vec4(position,1);
		gl_PointSize = point_size;
	}
}